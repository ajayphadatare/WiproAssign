[4:04 PM] Maria (Unverified)
package com.computationalalgorithms;
 
public class TravelingSalesman {
	 // Function to solve the TSP using Dynamic Programming
    public static int tsp(int[][] dist) {
        int n = dist.length;
        int VISITED_ALL = (1 << n) - 1;
        int[][] dp = new int[1 << n][n];
 
        // Initialize dp array with a large value
        for (int i = 0; i < (1 << n); i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = Integer.MAX_VALUE;
            }
        }
 
        // Base case: starting from the first city
        dp[1][0] = 0;
 
        // Iterate over all subsets of cities
        for (int mask = 1; mask < (1 << n); mask++) {
            for (int i = 0; i < n; i++) {
                // Continue if the ith city is not in the subset represented by mask
                if ((mask & (1 << i)) == 0) continue;
 
                // Try to find the minimum cost path to city i
                for (int j = 0; j < n; j++) {
                    if ((mask & (1 << j)) != 0 && i != j) {
                        dp[mask][i] = Math.min(dp[mask][i], dp[mask ^ (1 << i)][j] + dist[j][i]);
                    }
                }
            }
        }
 
        // Find the minimum cost to visit all cities and return to the starting city
        int minCost = Integer.MAX_VALUE;
        for (int i = 1; i < n; i++) {
            minCost = Math.min(minCost, dp[VISITED_ALL][i] + dist[i][0]);
        }
 
        return minCost;
    }
 
    public static void main(String[] args) {
        int[][] dist = {
            {0, 10, 15, 20},
            {10, 0, 35, 25},
            {15, 35, 0, 30},
            {20, 25, 30, 0}
        };
 
        System.out.println("The minimum cost is " + tsp(dist));
    }
}



[4:05 PM] Maria (Unverified)
Task 2: Traveling Salesman Problem

Create a function int FindMinCost(int[,] graph)

that takes a 2D array representing the graph where graph[i][j] is

the cost to travel from city i to city j. The function should return

the minimum cost to visit all cities and return to the starting city. 

Use dynamic programming for this solution.


public class TravelingSalesman {
    
    public int FindMinCost(int[][] graph) {
        int n = graph.length;
        int VISITED_ALL = (1 << n) - 1;
        int[][] dp = new int[n][1 << n];
        
        // Initialize dp array with -1
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < (1 << n); j++) {
                dp[i][j] = -1;
            }
        }
        
        return tsp(0, 1, graph, dp, VISITED_ALL);
    }

    private int tsp(int pos, int mask, int[][] graph, int[][] dp, int VISITED_ALL) {
        if (mask == VISITED_ALL) {
            return graph[pos][0];
        }

        if (dp[pos][mask] != -1) {
            return dp[pos][mask];
        }

        int minCost = Integer.MAX_VALUE;
        for (int city = 0; city < graph.length; city++) {
            if ((mask & (1 << city)) == 0) {
                int newCost = graph[pos][city] + tsp(city, mask | (1 << city), graph, dp, VISITED_ALL);
                minCost = Math.min(minCost, newCost);
            }
        }

        dp[pos][mask] = minCost;
        return minCost;
    }

    public static void main(String[] args) {
        TravelingSalesman tsp = new TravelingSalesman();
        int[][] graph = {
            {0, 10, 15, 20},
            {10, 0, 35, 25},
            {15, 35, 0, 30},
            {20, 25, 30, 0}
        };
        System.out.println("The minimum cost to visit all cities is: " + tsp.FindMinCost(graph));
    }
}
