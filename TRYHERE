import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

public class Graph {
    private int numVertices;
    private List<Integer>[] adjacencyList;

    public Graph(int numVertices) {
        this.numVertices = numVertices;
        this.adjacencyList = new List[numVertices];

        for (int i = 0; i < numVertices; i++) {
            adjacencyList[i] = new ArrayList<>();
        }
    }

    public void addEdge(int source, int destination) {
        adjacencyList[source].add(destination);
        adjacencyList[destination].add(source);
    }

    public List<Integer> getNeighbors(int vertex) {
        return adjacencyList[vertex];
    }

    public int getNumVertices() {
        return numVertices;
    }
}

public class BreadthFirstSearch {
    private boolean[] visited;

    public void bfs(Graph graph, int start) {
        visited = new boolean[graph.getNumVertices()];
        Queue<Integer> queue = new LinkedList<>();

        queue.add(start);
        visited[start] = true;

        while (!queue.isEmpty()) {
            int node = queue.poll();
            System.out.print(node + " ");

            for (int neighbor : graph.getNeighbors(node)) {
                if (!visited[neighbor]) {
                    queue.add(neighbor);
                    visited[neighbor] = true;
                }
            }
        }
    }
}

public class DepthFirstSearch {
    private boolean[] visited;
    private List<Integer> dfsOrder;

    public void dfs(Graph graph, int start) {
        visited = new boolean[graph.getNumVertices()];
        dfsOrder = new ArrayList<>();

        dfsRecursive(graph, start);

        System.out.println("DFS Order:");
        for (int node : dfsOrder) {
            System.out.print(node + " ");
        }
    }

    private void dfsRecursive(Graph graph, int vertex) {
        visited[vertex] = true;
        dfsOrder.add(vertex);

        for (int neighbor : graph.getNeighbors(vertex)) {
            if (!visited[neighbor]) {
                dfsRecursive(graph, neighbor);
            }
        }
    }
}

public class GraphTraversal {
    public static void main(String[] args) {
        Graph graph = new Graph(4);
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 2);
        graph.addEdge(2, 0);
        graph.addEdge(2, 3);
        graph.addEdge(3, 3);

        BreadthFirstSearch bfs = new BreadthFirstSearch();
        bfs.bfs(graph, 2);

        System.out.println();

        DepthFirstSearch dfs = new DepthFirstSearch();
        dfs.dfs(graph, 2);
    }
}
