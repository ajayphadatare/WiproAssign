[2:09 PM] Maria (Unverified)
package com.graph;
 
public class GraphRepresentation {
 
	public static void main(String[] args) {
		// TODO Auto-generated method stub
int[][] graph= {
		{0,1,0,0,1},
		{1,0,1,0,1},
		{0,1,0,1,0},
		{0,0,1,0,1},
		{1,1,0,1,0}	
};
Graph g =new Graph(5);//No of vertices are 5
g.addEdge(0,1);
g.addEdge(2,3);
g.addEdge(1,2);
g.addEdge(3,4);
g.addEdge(0,4);
g.addEdge(1,4);
g.printAdjList();
 
//g.bfs(0);
g.dfs(0);
	}
 
}


[2:09 PM] Maria (Unverified)
package com.graph;
 
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
 
public class Graph {
	ArrayList<ArrayList<Integer>> adjList = new ArrayList<>();
 
	Graph(int v) {
		for (int i = 0; i < v; i++) {
			adjList.add(new ArrayList<Integer>());
		}
	}
 
	public void addEdge(int U, int V) {
		adjList.get(U).add(V);
		adjList.get(V).add(U);
	}
 
	public void printAdjList() {
		for (int i = 0; i < adjList.size(); i++) {// i-Vertex no
			System.out.println("Adj list of vertex " + i);
			for (int j = 0; j < adjList.get(i).size(); j++) {
				System.out.println(" " + adjList.get(i).get(j));
			}
		}
	}
 
	// BFS
 
	public void bfs(int v) {
		int V = adjList.size();// total no of vertices
		boolean[] visited = new boolean[V];
		visited[v] = true;
 
		Queue<Integer> q = new LinkedList<>();
		q.add(v);
		while (q.size() != 0) {
			// dequeue
			int vertex = q.remove();
			System.out.print(vertex + " ");
			for (int i = 0; i < adjList.get(vertex).size(); i++) {
				int av = adjList.get(vertex).get(i);
				if (!visited[av]) {
					q.add(av);
					visited[av] = true;
				}
			}
		}
	}
 
	public void dfs(int v) {
		int V = adjList.size();// total no of vertices
		boolean[] visited = new boolean[V];
		dfs2(v, visited);
 
	}
 
	public void dfs2(int v, boolean[] visited) {
		visited[v] = true;
		System.out.println(v + " ");
		for (int i = 0; i < adjList.get(v).size(); i++) {
			int av = adjList.get(v).get(i);
			if (!visited[av])
				dfs2(av, visited);
 
		}
	}
}
 
