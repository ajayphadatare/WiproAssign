import java.util.*;

public class BFSGraph {
    private int V;   // Number of vertices
    private LinkedList<Integer> adj[]; // Adjacency List

    // Constructor
    BFSGraph(int v) {
        V = v;
        adj = new LinkedList[v];
        for (int i = 0; i < v; ++i) {
            adj[i] = new LinkedList();
        }
    }

    // Function to add an edge into the graph
    void addEdge(int v, int w) {
        adj[v].add(w);  // Add w to v's list.
        adj[w].add(v);  // Since the graph is undirected, add v to w's list as well.
    }

    // Function to perform BFS traversal starting from a given node
    void BFS(int startNode) {
        // Mark all the vertices as not visited (set as false by default in Java)
        boolean visited[] = new boolean[V];

        // Create a queue for BFS
        LinkedList<Integer> queue = new LinkedList<Integer>();

        // Mark the current node as visited and enqueue it
        visited[startNode] = true;
        queue.add(startNode);

        while (queue.size() != 0) {
            // Dequeue a vertex from the queue and print it
            startNode = queue.poll();
            System.out.print(startNode + " ");

            // Get all adjacent vertices of the dequeued vertex startNode
            // If an adjacent has not been visited, mark it visited and enqueue it
            Iterator<Integer> i = adj[startNode].listIterator();
            while (i.hasNext()) {
                int n = i.next();
                if (!visited[n]) {
                    visited[n] = true;
                    queue.add(n);
                }
            }
        }
    }

    // Driver method to test the above methods
    public static void main(String args[]) {
        BFSGraph g = new BFSGraph(4);

        g.addEdge(0, 1);
        g.addEdge(0, 2);
        g.addEdge(1, 2);
        g.addEdge(2, 0);
        g.addEdge(2, 3);
        g.addEdge(3, 3);

        System.out.println("Breadth First Traversal starting from node 2:");

        g.BFS(2);
    }
}
