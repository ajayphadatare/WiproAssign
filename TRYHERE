 private int[] parent;

	    public Unionfind(int n) {
	        parent = new int[n];
	        for (int i = 0; i < n; i++) {
	            parent[i] = i;
	        }
	    }

	    public int find(int i) {
	        if (parent[i] != i) {
	            parent[i] = find(parent[i]);
	        }
	        return parent[i];
	    }

	    public void union(int i, int j) {
	        int rootI = find(i);
	        int rootJ = find(j);
	        parent[rootI] = rootJ;
	    }

	    public boolean isConnected(int i, int j) {
	        return find(i) == find(j);
	    }
	    
	    public static void main(String []args) {
	    	
	    	int n = 5; // Number of nodes in the graph
	    	Unionfind uf = new Unionfind(n);

	    	// Connect nodes 0 and 1
	    	uf.union(0, 1);

	    	// Connect nodes 1 and 2
	    	uf.union(1, 2);

	    	// Connect nodes 2 and 3
	    	uf.union(2, 3);

	    	// Connect nodes 3 and 4
	    	uf.union(3, 4);

	    	// Connect nodes 4 and 0
	    	if (uf.isConnected(4, 0)) {
	    	    System.out.println("Graph contains a cycle");
	    	} else {
	    	    System.out.println("Graph does not contain a cycle");
	    	}
	    }
