[12:13 PM] Maria (Unverified)
Task 1: Knapsack Problem
Write a function int Knapsack(int W, int[] weights, int[] values) in Java that determines the maximum value of items that can fit into a knapsack with a capacity W. The function should handle up to 100 items. Find the optimal way to fill the knapsack with the given items to achieve the maximum total value.
You must consider that you cannot break items, but have to include them whole.

Task 2: Longest Common Subsequence
Implement int LCS(string text1, string text2)  to find the length of the longest common subsequence between two strings.



public class Knapsack {
    public static int Knapsack(int W, int[] weights, int[] values) {
        int[][] dp = new int[weights.length + 1][W + 1];

        for (int i = 1; i <= weights.length; i++) {
            for (int j = 1; j <= W; j++) {
                if (weights[i - 1] <= j) {
                    dp[i][j] = Math.max(values[i - 1] + dp[i - 1][j - weights[i - 1]], dp[i - 1][j]);
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }

        return dp[weights.length][W];
    }

    public static void main(String[] args) {
        int W = 10;
        int[] weights = {2, 3, 5, 6};
        int[] values = {6, 10, 12, 15};

        int maxValue = Knapsack(W, weights, values);
        System.out.println("Maximum value: " + maxValue);
    }
}



public class LCS {
    public static int LCS(String text1, String text2) {
        int m = text1.length();
        int n = text2.length();

        int[][] dp = new int[m + 1][n + 1];

        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (text1.charAt(i - 1) == text2.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }

        return dp[m][n];
    }

    public static void main(String[] args) {
        String text1 = "abcdef";
        String text2 = "abghij";

        int length = LCS(text1, text2);
        System.out.println("Length of the longest common subsequence: " + length);
    }
}
