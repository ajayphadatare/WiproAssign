[10:34 AM] Maria (Unverified)
package com.bitwisealogorithms;
/*
* Using Built-in Functions
* Some languages provide built-in functions to count set bits.
 
In Java 1.5 and later, you can use  Integer.bitCount() method
*/
public class CountSetBits {
	public static void main(String[] args) {
        int num = 29;
        System.out.println("Number of set bits in " + num + " is " + Integer.bitCount(num));
    }
}


[11:23 AM] Maria (Unverified)
package com.bitwisealogorithms;
/*
* Iterative Method
* This is a straightforward method where you repeatedly shift the bits
* of the number and check if the least significant bit is set.
*/
public class CountSetBitsEx2 {
	// Function to count the number of set bits in a number
    public static int countSetBits(int n) {
        int count = 0;
        while (n > 0) {
            count += (n & 1); // step1: We have to find a bitwise_and with 1
            n >>= 1; // step2:  We have to right shift with 1
        }
        return count;
    }
//
    public static void main(String[] args) {
        int num = 53;
        System.out.println("Number of set bits in " + num + " is " + countSetBits(num));
    }
}



[12:09 PM] Maria (Unverified)
package com.bitwisealogorithms;
 
public class FindNonRepeatingElements {
	public static void findNonRepeating(int[] arr) {
        int xorResult = 0;
 
        // Step 1: XOR all elements to get xorResult
        for (int num : arr) {
            xorResult ^= num;
        }
 
        // Step 2: Find the rightmost set bit in xorResult
        int setBit = xorResult & -xorResult;
 
        // Step 3: Divide elements into two sets and XOR them
        int x = 0, y = 0;
        for (int num : arr) {
            if ((num & setBit) == 0) {
                x ^= num;
            } else {
                y ^= num;
            }
        }
 
        // The two non-repeating elements are x and y
        System.out.println("The two non-repeating elements are " + x + " and " + y);
    }
 
    public static void main(String[] args) {
        int[] arr = {4, 2, 4, 5, 2, 3, 3, 1};
        findNonRepeating(arr);
    }
}



[12:14 PM] Maria (Unverified)
package com.bitwisealogorithms;
 
public class SwapBits {
	 public static int swapBits(int n, int i, int j) {
	        // Extract the i-th and j-th bits
	        int bitAtI = (n >> i) & 1;
	        int bitAtJ = (n >> j) & 1;
 
	        // If the bits are the same, no need to swap
	        if (bitAtI == bitAtJ) {
	            return n;
	        }
 
	        // Create a bit mask where bits at positions i and j are set
	        int mask = (1 << i) | (1 << j);
 
	        // Toggle the bits at positions i and j
	        n = n ^ mask;
 
	        return n;
	    }
 
	    public static void main(String[] args) {
	        int num = 29; // binary: 11101
	        int i = 1;
	        int j = 3;
	        System.out.println("Original number: " + num + " (" + Integer.toBinaryString(num) + ")");
	        int result = swapBits(num, i, j);
	        System.out.println("Number after swapping bits at positions " + i + " and " + j + ": " + result + " (" + Integer.toBinaryString(result) + ")");
	    }
}



[12:20 PM] Maria (Unverified)
package com.bitwisealogorithms;
 
public class CountTotalSetBits {
	// Function to count total set bits in all numbers from 1 to n
    public static int countTotalSetBits(int n) {
        int totalSetBits = 0;
        int i = 0;
        
        while ((1 << i) <= n) {
            // Find the size of blocks and count how many full blocks of size 2^(i+1) are there
            int blockSize = 1 << (i + 1);
            int fullBlocks = n / blockSize;
            
            // Each full block contributes with 2^i set bits in i-th position
            totalSetBits += fullBlocks * (1 << i);
            
            // Check if there are remaining bits after the last full block
            int remainingBits = n % blockSize;
            
            // Add set bits in the remaining part, if any
            totalSetBits += Math.max(0, remainingBits - (1 << i) + 1);
            
            i++;
        }
        
        return totalSetBits;
    }
 
    public static void main(String[] args) {
        int n = 7; // Example input
        System.out.println("Total set bits from 1 to " + n + " is " + countTotalSetBits(n));
    }
}


[1:03 PM] Maria (Unverified)
package com.bitwisealogorithms;
 
public class OptimizeBitwiseAND {
	// Function to calculate the Bitwise AND of all subsets of an array
    public static int bitwiseANDOfAllSubsets(int[] arr) {
        int result = arr[0];  // Initialize result with the first element
 
        // Iterate through each element and compute the AND with the result
        for (int i = 1; i < arr.length; i++) {
            result &= arr[i];
 
            // If result becomes zero, we can break early
            if (result == 0) {
                break;
            }
        }
 
        return result;
    }
 
    public static void main(String[] args) {
        int[] arr = {12, 15, 7};  // Example input
        int andResult = bitwiseANDOfAllSubsets(arr);
        System.out.println("Bitwise AND of all subsets: " + andResult);
    }
}
 
