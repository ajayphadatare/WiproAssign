[5:19 PM] Maria (Unverified)
package com.computationalalgorithms;
 
import java.util.Arrays;
 
class Job {
    char id;     // Job Id
    int deadline; // Deadline of job
    int profit;  // Profit if job is completed before or on deadline
    
    // Constructor
    public Job(char id, int deadline, int profit) {
        this.id = id;
        this.deadline = deadline;
        this.profit = profit;
    }
}
 
public class JobSequencing {
 
    // Function to schedule the jobs to maximize profit
    public static void scheduleJobs(Job[] jobs, int n) {
        // Sort jobs in descending order of profit
        Arrays.sort(jobs, (a, b) -> b.profit - a.profit);
        
        // To keep track of free time slots
        boolean[] result = new boolean[n];
        
        // To store the sequence of jobs
        char[] jobOrder = new char[n];
        
        // Initialize all slots to be free
        for (int i = 0; i < n; i++) {
            result[i] = false;
        }
        
        // Iterate through all given jobs
        for (int i = 0; i < jobs.length; i++) {
            // Find a free slot for this job (starting from the last possible slot)
            for (int j = Math.min(n, jobs[i].deadline) - 1; j >= 0; j--) {
                // Free slot found
                if (result[j] == false) {
                    result[j] = true;
                    jobOrder[j] = jobs[i].id;
                    break;
                }
            }
        }
        
        // Print the job order to maximize profit
        System.out.println("Job sequence to maximize profit:");
        for (int i = 0; i < n; i++) {
            if (result[i]) {
                System.out.print(jobOrder[i] + " ");
            }
        }
        System.out.println();
    }
 
    // Driver code
    public static void main(String[] args) {
        Job[] jobs = {
            new Job('a', 2, 100),
            new Job('b', 1, 19),
            new Job('c', 2, 27),
            new Job('d', 1, 25),
            new Job('e', 3, 15)
        };
        int n = 3;  // Number of time slots
        scheduleJobs(jobs, n);
    }
}


[5:18 PM] Maria (Unverified)
Task 3: Job Sequencing Problem

Define a class Job with properties int Id, int Deadline, and int Profit.

Then implement a function List<Job> JobSequencing(List<Job> jobs) that

takes a list of jobs and returns the maximum profit sequence of jobs 

that can be done before the deadlines. Use the greedy method to solve

this problem.


import java.util.*;

class Job {
    int id;
    int deadline;
    int profit;

    public Job(int id, int deadline, int profit) {
        this.id = id;
        this.deadline = deadline;
        this.profit = profit;
    }
}

class JobSequencingSolution {
    public List<Job> JobSequencing(List<Job> jobs) {
        // Sort jobs based on profit in descending order
        Collections.sort(jobs, (a, b) -> b.profit - a.profit);

        // Find the maximum deadline among all jobs
        int maxDeadline = 0;
        for (Job job : jobs) {
            if (job.deadline > maxDeadline) {
                maxDeadline = job.deadline;
            }
        }

        // Create a result array to store the result (sequence of jobs)
        Job[] result = new Job[maxDeadline];
        // Create a slot array to keep track of free time slots
        boolean[] slot = new boolean[maxDeadline];

        // Iterate through all given jobs
        for (Job job : jobs) {
            // Find a free slot for this job (we start from the last possible slot)
            for (int j = job.deadline - 1; j >= 0; j--) {
                if (!slot[j]) {
                    // Add this job to result
                    result[j] = job;
                    slot[j] = true;
                    break;
                }
            }
        }

        // Create a list to store the final job sequence
        List<Job> jobSequence = new ArrayList<>();
        for (Job job : result) {
            if (job != null) {
                jobSequence.add(job);
            }
        }

        return jobSequence;
    }

    public static void main(String[] args) {
        List<Job> jobs = new ArrayList<>();
        jobs.add(new Job(1, 4, 20));
        jobs.add(new Job(2, 1, 10));
        jobs.add(new Job(3, 1, 40));
        jobs.add(new Job(4, 1, 30));

        JobSequencingSolution solution = new JobSequencingSolution();
        List<Job> jobSequence = solution.JobSequencing(jobs);

        System.out.println("The job sequence for maximum profit is:");
        for (Job job : jobSequence) {
            System.out.println("Job ID: " + job.id + ", Deadline: " + job.deadline + ", Profit: " + job.profit);
        }
    }
}
