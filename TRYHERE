[11:53 AM] Maria (Unverified)
package com.graph;
 
import java.util.*;
 
 
public class DijkstraAlgorithm {
	private static class Node implements Comparable<Node> {
        int vertex;
        int distance;
 
        Node(int vertex, int distance) {
            this.vertex = vertex;
            this.distance = distance;
        }
 
        @Override
        public int compareTo(Node other) {
            return Integer.compare(this.distance, other.distance);
        }
    }
 
    public static void dijkstra(int[][] graph, int source) {
        int V = graph.length;
        int[] dist = new int[V];
        boolean[] visited = new boolean[V];
 
        PriorityQueue<Node> pq = new PriorityQueue<>();
 
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[source] = 0;
        pq.add(new Node(source, 0));
 
        while (!pq.isEmpty()) {
            Node node = pq.poll();
            int u = node.vertex;
 
            if (visited[u]) continue;
            visited[u] = true;
 
            for (int v = 0; v < V; v++) {
                if (!visited[v] && graph[u][v] != 0 && dist[u] + graph[u][v] < dist[v]) {
                    dist[v] = dist[u] + graph[u][v];
                    pq.add(new Node(v, dist[v]));
                }
            }
        }
 
        printSolution(dist, source);
    }
 
    private static void printSolution(int[] dist, int source) {
        System.out.println("Vertex\tDistance from Source " + source);
        for (int i = 0; i < dist.length; i++) {
            System.out.println(i + "\t\t" + dist[i]);
        }
    }
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[][] graph = new int[][] {
            { 0, 10, 20, 0, 0 },
            { 10, 0, 0, 50, 10 },
            { 20, 0, 0, 20, 33 },
            { 0, 50, 20, 0, 2 },
            { 0, 10, 33, 2, 0 }
        };
        dijkstra(graph, 0);
    }
	}
 
 


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;

public class DijkstraShortestPath {
    public static Map<Integer, Integer> dijkstra(int start, List<List<Edge>> graph) {
        int n = graph.size();
        Map<Integer, Integer> distances = new HashMap<>();
        Map<Integer, Integer> previous = new HashMap<>();
        PriorityQueue<Node> pq = new PriorityQueue<>();

        for (int i = 0; i < n; i++) {
            distances.put(i, Integer.MAX_VALUE);
            previous.put(i, -1);
        }
        distances.put(start, 0);
        pq.add(new Node(start, 0));

        while (!pq.isEmpty()) {
            Node current = pq.poll();
            for (Edge neighbor : graph.get(current.node)) {
                int distance = distances.get(current.node) + neighbor.weight;
                if (distance < distances.get(neighbor.destination)) {
                    distances.put(neighbor.destination, distance);
                    previous.put(neighbor.destination, current.node);
                    pq.add(new Node(neighbor.destination, distance));
                }
            }
        }

        return previous;
    }

    static class Node implements Comparable<Node> {
        int node;
        int distance;

        Node(int node, int distance) {
            this.node = node;
            this.distance = distance;
        }

        @Override
        public int compareTo(Node other) {
            return this.distance - other.distance;
        }
    }

    static class Edge {
        int destination;
        int weight;

        Edge(int destination, int weight) {
            this.destination = destination;
            this.weight = weight;
        }
    }

    public static void main(String[] args) {
        int n = 5; // Number of nodes in the graph
        List<List<Edge>> graph = new ArrayList<>();

        // Create the graph
        for (int i = 0; i < n; i++) {
            graph.add(new ArrayList<>());
        }

        // Add edges with their weights
        graph.get(0).add(new Edge(1, 5));
        graph.get(0).add(new Edge(2, 3));
        graph.get(1).add(new Edge(2, 2));
        graph.get(1).add(new Edge(3, 4));
        graph.get(2).add(new Edge(3, 1));
        graph.get(2).add(new Edge(4, 7));
        graph.get(3).add(new Edge(4, 2));

        int start = 0; // Start node
        Map<Integer, Integer> shortestPath = dijkstra(start, graph);

        System.out.println("Shortest Path from Node " + start);
        for (int i = 0; i < n; i++) {
            if (i != start) {
                System.out.print("Node " + i + ": ");
                int current = i;
                while (current != -1) {
                    System.out.print(current + " -> ");
                    current = shortestPath.get(current);
                }
                System.out.println("Node " + start);
            }
        }
    }
}
